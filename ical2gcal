#!/usr/bin/perl -w
#
# Create a new Google Calendar event from an iCal file
# input.
#
# Useage: ical2gcal < lunch.ical

# For debugging purposes, here's how to upload new calendar events using curl
# curl https://www.google.com/accounts/ClientLogin --data-urlencode Email=x.y@gmail.com --data-urlencode Passwd=*************** -d accountType=GOOGLE -d source=ical2gcal -d service=cl
# curl -X POST -d @tennis.ical https://www.google.com/calendar/feeds/default/private/full --header "Content-Type:application/atom+xml" --header "Authorization: GoogleLogin auth=****"
# curl -X POST -d @tennis.ical https://www.google.com/calendar/feeds/default/private/full?t=**** --header "Content-Type:application/atom+xml" --header "Authorization: GoogleLogin auth=****"

use Perl::Tidy;
use strict;
use warnings;
use Carp;
use LWP::Simple;
use HTTP::Status qw(:constants :is status_message);
use Term::ReadKey;

our $VERSION = 0.1;

my $CREDENTIALSFILE = $ENV{'HOME'} . '/.ical2gcalrc';
undef my $USERNAME;
undef my $PASSWORD;

# From 20140109T090000 to 2014-01-09T09:00:00.000Z
sub timeformat {
    my $time = shift;
    if ( defined $time ) {
        $time =~
s/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})/$1-$2-$3T$4:$5:$6.000/gxms;
    }
    return $time;
}

sub getcredentials {
    if ( !-e $CREDENTIALSFILE ) {
        if ( !defined $ARGV[0] ) {

            croak "Set credentials Email and Passwd in $CREDENTIALSFILE\n";
        }
        return ( q{}, q{} );
    }
    open my $FILE, '<', $CREDENTIALSFILE
      or croak "Credentials not found in $CREDENTIALSFILE";
    while (<$FILE>) {
        if ( $_ =~ /^Email=(.*)$/xms )  { $USERNAME = $1 }
        if ( $_ =~ /^Passwd=(.*)$/xms ) { $PASSWORD = $1 }
    }
    close $FILE or croak 'Could not close credentials file.';
    if ( $USERNAME eq q{} || $PASSWORD eq q{} ) {
        croak "Set credentials Email and Passwd in $CREDENTIALSFILE\n";
    }
}

sub promptcredentials {
    print "Google Calendar username: ";
    ReadMode 'normal';
    $USERNAME = chomp( my $usr = ReadLine 0 );
    print "Google Calendar password: ";
    ReadMode 'noecho';
    $PASSWORD = chomp( my $pass = ReadLine 0 );
    ReadMode 'restore';
    return;
}

sub credentials {
    if ( defined($USERNAME) and defined($PASSWORD) ) {
        return;
    }
    getcredentials;
    if ( defined $ARGV[0] and ( $USERNAME eq q{} or $PASSWORD eq q{} ) ) {
        promptcredentials;
    }
    return;
}

sub main {
    my @buff = ();
    my @ical = ();
    my $ICALSTREAM;
    if ( defined( $ARGV[0] )
        && ( $ARGV[0] eq '--help' || $ARGV[0] eq '--usage' ) )
    {
        print "Usage: ical2gcal [file.ical]\n";
        exit 0;
    }
    elsif ( !defined( $ARGV[0] ) ) {
        open $ICALSTREAM, "<&STDIN" or croak 'Could not open STDIN.';
    }
    else {
        open $ICALSTREAM, '<', $ARGV[0] or croak 'Could not open file.';
    }

    # Unwrap lines VCALENDAR data
    my $icaldata = 0;
    while (<$ICALSTREAM>) {
        if (m/^BEGIN\:VCALENDAR/xms) {
            $icaldata = 1;
        }
        elsif (m/^END\:VCALENDAR/xms) {
            $icaldata = 0;
            parseical( \@ical );
            @ical = ();
        }
        next if ( !$icaldata );
        chomp;
        if ( !m/^\s/xms ) {
            my $tmp = q{};
            while ( my $l = shift @buff ) {
                $tmp .= $l;
            }
            push @ical, $tmp;

        }
        s/^\s+(.*)$/$1/gxms;
        push @buff, $_;
    }
    close $ICALSTREAM;
    return;
}

sub parseical {
    my @ical = @{ $_[0] };
    undef my %idata;
    while ( my $l = pop @ical ) {
        my @val = split /\:/xms, $l;
        $val[0] =~ s/;LANGUAGE=..-..//gxms;
        $idata{ $val[0] } = @val[ 1 .. $#val ];
        $idata{ $val[0] } =~ s/\\n/ /gxms;
        $idata{ $val[0] } =~ s/\\//gxms;
    }
    uploadevent( \%idata );
    return;
}

sub makeatom {
    my %data = %{ $_[0] };

# This is what a Google Calendar Atom/xml file should look like
# https://developers.google.com/google-apps/calendar/v2/developers_guide_protocol#CreatingEvents
    my $atom = <<'END';
<entry xmlns='http://www.w3.org/2005/Atom' xmlns:gd='http://schemas.google.com/g/2005'>
  <category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/g/2005#event'></category>
  <title type='text'>GCAL_TITLE</title>
  <content type='text'>GCAL_CONTENT</content>
  <gd:transparency
    value='http://schemas.google.com/g/2005#event.opaque'>
  </gd:transparency>
  <gd:eventStatus
    value='http://schemas.google.com/g/2005#event.confirmed'>
  </gd:eventStatus>
  <gd:where valueString='GCAL_WHERE'></gd:where>
  <gd:when startTime='GCAL_STARTTIME' endTime='GCAL_ENDTIME'></gd:when>
</entry>
END

    if ( length $data{'SUMMARY'} ) {
        $atom =~ s/GCAL_TITLE/$data{'SUMMARY'}/xms;
    }
    if ( length $data{'DESCRIPTION'} ) {
        $atom =~ s/GCAL_CONTENT/$data{'DESCRIPTION'}/xms;
    }
    if ( length $data{'LOCATION'} ) {
        $atom =~ s/GCAL_WHERE/$data{'LOCATION'}/xms;
    }
    my $starttime = timeformat( $data{'DTSTART;TZID=FLE Standard Time'} );
    my $endtime   = timeformat( $data{'DTEND;TZID=FLE Standard Time'} );
    if ( length $starttime ) { $atom =~ s/GCAL_STARTTIME/$starttime/xms; }
    if ( length $endtime )   { $atom =~ s/GCAL_ENDTIME/$endtime/xms; }
    return $atom;
}

sub googleauth {
    credentials;

    # Get authentication token
    my %config = (
        URL         => 'https://www.google.com/accounts/ClientLogin',
        AccountType => 'GOOGLE',
        Email       => $USERNAME,
        Passwd      => $PASSWORD,
        Serivce     => 'cl',
        Source      => 'ical2gcal',
    );
    my $ua       = LWP::UserAgent->new;
    my $response = $ua->post(
        $config{URL},
        {
            accountType => $config{AccountType},
            Email       => $config{Email},
            Passwd      => $config{Passwd},
            service     => $config{Serivce},
            source      => $config{Source}
        }
    );
    if ( !$response->is_success || $response->code != HTTP_OK ) {
        croak "\nError: ", $response->status_line;
    }
    for ( split /\n/xms, $response->content ) {
        return $1 if $_ =~ /^Auth=(.*)$/xms;
    }
    return q{};
}

sub uploadevent {
    my %data  = %{ $_[0] };
    my $atom  = makeatom( \%data );
    my $token = googleauth;
    my $ua    = LWP::UserAgent->new;
    $ua->default_header( 'Authorization' => "GoogleLogin auth=$token" );

    # POST Atom/xml calendar data to Google Calendar
    my $req = HTTP::Request->new( 'POST',
        'https://www.google.com/calendar/feeds/default/private/full' );
    $req->header( 'Content-Type' => 'application/atom+xml' );
    $req->content($atom);
    my $r = $ua->request($req);
    my $redirurl;
    if ( $r->code == HTTP_FOUND ) {
        if ( $r->content =~ /.*?<A\sHREF="(.*?)">here<\/A>.*/xms ) {
            $redirurl = $1;
        }
        $req = HTTP::Request->new( 'POST', $redirurl );
        $req->header( 'Content-Type' => 'application/atom+xml' );
        $req->content($atom);
        $r = $ua->request($req);
    }

    if ( $r->code == HTTP_CREATED ) {
        print 'Created event '
          . $data{'SUMMARY'} . ' on '
          . (
            substr timeformat( $data{'DTSTART;TZID=FLE Standard Time'} ),
            0, length('yyyy-mm-ddTHH:MM')
          )
          . "\n"
          or croak 'Could not print result.';
    }
    else {
        print 'HTTP code ' . $r->code . "\n" or croak 'Could not print.';
        print $r->content . "\n"             or croak 'Could not print.';
        print $atom                          or croak 'Could not print.';
        exit 1;
    }
    return;
}

main;
