#!/usr/bin/perl -w
#
# Create a new Google Calendar event from an iCal file
# input.
#
# Useage: ical2gcal < lunch.ical

# For debugging purposes, here's how to upload new calendar events using curl
# curl https://www.google.com/accounts/ClientLogin --data-urlencode Email=x.y@gmail.com --data-urlencode Passwd=*************** -d accountType=GOOGLE -d source=ical2gcal -d service=cl
# curl -X POST -d @tennis.ical https://www.google.com/calendar/feeds/default/private/full --header "Content-Type:application/atom+xml" --header "Authorization: GoogleLogin auth=****"
# curl -X POST -d @tennis.ical https://www.google.com/calendar/feeds/default/private/full?t=**** --header "Content-Type:application/atom+xml" --header "Authorization: GoogleLogin auth=****"

use Perl::Tidy;
use strict;
use warnings;
use Carp;
use LWP::Simple;
use HTTP::Status qw(:constants :is status_message);

our $VERSION = 0.1;

my $credentialsfile = $ENV{'HOME'} . '/.ical2gcalrc';

# This is what a Google Calendar Atom/xml file should look like
# https://developers.google.com/google-apps/calendar/v2/developers_guide_protocol#CreatingEvents
my $template = <<'END';
<entry xmlns='http://www.w3.org/2005/Atom' xmlns:gd='http://schemas.google.com/g/2005'>
  <category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/g/2005#event'></category>
  <title type='text'>GCAL_TITLE</title>
  <content type='text'>GCAL_CONTENT</content>
  <gd:transparency
    value='http://schemas.google.com/g/2005#event.opaque'>
  </gd:transparency>
  <gd:eventStatus
    value='http://schemas.google.com/g/2005#event.confirmed'>
  </gd:eventStatus>
  <gd:where valueString='GCAL_WHERE'></gd:where>
  <gd:when startTime='GCAL_STARTTIME' endTime='GCAL_ENDTIME'></gd:when>
</entry>
END

# From 20140109T090000 to 2014-01-09T09:00:00.000Z
sub timeformat {
    my $tmp = shift;
    if ( defined $tmp ) {
        $tmp =~
s/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})/$1-$2-$3T$4:$5:$6.000/gxms;
    }
    return $tmp;
}

sub exitnocredentials {
    croak "Set credentials Email and Passwd in $credentialsfile\n";
}

sub getauthtoken {
    for ( split /\n/xms, shift ) {
        return $1 if $_ =~ /^Auth=(.*)$/xms;
    }
    return q{};
}

sub getcredentials {
    if ( !-e $credentialsfile ) {
        exitnocredentials;
    }
    open my $FILE, '<', $credentialsfile
      or croak "Credentials not found in $credentialsfile";
    my $email  = q{};
    my $passwd = q{};
    while (<$FILE>) {
        if ( $_ =~ /^Email=(.*)$/xms )  { $email  = $1 }
        if ( $_ =~ /^Passwd=(.*)$/xms ) { $passwd = $1 }
    }
    close $FILE or croak 'Could not close credentials file.';
    if ( $email eq q{} || $passwd eq q{} ) {
        exitnocredentials;
    }
    return ( $email, $passwd );
}

my @buff = ();
my @ical = ();

# Unwrap lines VCALENDAR data
while (<>) {
    chomp;
    if ( !m/^\s/xms ) {
        my $tmp = q{};
        while ( my $l = shift @buff ) {
            $tmp .= $l;
        }
        push @ical, $tmp;

    }
    s/^\s+(.*)$/$1/gxms;
    push @buff, $_;
}

undef my %idata;
while ( my $l = pop @ical ) {
    my @val = split /\:/xms, $l;
    $val[0] =~ s/;LANGUAGE=..-..//gxms;
    $idata{ $val[0] } = @val[ 1 .. $#val ];
    $idata{ $val[0] } =~ s/\\n/ /gxms;
    $idata{ $val[0] } =~ s/\\//gxms;
}

#foreach $key (sort keys %idata) { print "$key: $idata{$key}\n"; }

if ( length $idata{'SUMMARY'} ) {
    $template =~ s/GCAL_TITLE/$idata{'SUMMARY'}/xms;
}
if ( length $idata{'DESCRIPTION'} ) {
    $template =~ s/GCAL_CONTENT/$idata{'DESCRIPTION'}/xms;
}
if ( length $idata{'LOCATION'} ) {
    $template =~ s/GCAL_WHERE/$idata{'LOCATION'}/xms;
}
my $starttime = timeformat( $idata{'DTSTART;TZID=FLE Standard Time'} );
my $endtime   = timeformat( $idata{'DTEND;TZID=FLE Standard Time'} );
if ( length $starttime ) { $template =~ s/GCAL_STARTTIME/$starttime/xms; }
if ( length $endtime )   { $template =~ s/GCAL_ENDTIME/$endtime/xms; }

( my $email, my $passwd ) = getcredentials;

# Get authentication token
my %config = (
    URL         => 'https://www.google.com/accounts/ClientLogin',
    AccountType => 'GOOGLE',
    Email       => $email,
    Passwd      => $passwd,
    Serivce     => 'cl',
    Source      => 'ical2gcal',
);

my $ua       = LWP::UserAgent->new;
my $response = $ua->post(
    $config{URL},
    {
        accountType => $config{AccountType},
        Email       => $config{Email},
        Passwd      => $config{Passwd},
        service     => $config{Serivce},
        source      => $config{Source}
    }
);
if ( !$response->is_success ) {
    croak 'Error: ', $response->status_line;
}
$config{AuthToken} = getauthtoken( $response->content );

$ua->default_header( 'Authorization' => "GoogleLogin auth=$config{AuthToken}" );

# POST Atom/xml calendar data to Google Calendar
my $req = HTTP::Request->new( 'POST',
    'https://www.google.com/calendar/feeds/default/private/full' );
$req->header( 'Content-Type' => 'application/atom+xml' );
$req->content($template);
my $r = $ua->request($req);
my $redirurl;
if ( $r->code == HTTP_FOUND ) {
    if ( $r->content =~ /.*?<A HREF="(.*?)">here<\/A>.*/xms ) {
        $redirurl = $1;
    }
    $req = HTTP::Request->new( 'POST', $redirurl );
    $req->header( 'Content-Type' => 'application/atom+xml' );
    $req->content($template);
    $r = $ua->request($req);
}

if ( $r->code == HTTP_CREATED ) {
    print 'Created event ' . $idata{'SUMMARY'} . ' on ' . substr $starttime, 0,
      length('yyyy-mm-ddTHH:MM') . "\n"
      or croak 'Could not print result.';
}
else {
    print 'HTTP code ' . $r->code . "\n" or croak 'Could not print.';
    print $r->content . "\n"             or croak 'Could not print.';
    print $template                      or croak 'Could not print.';
    exit 1;
}
